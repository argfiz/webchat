{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAM,+BAAS;;AAGf,MAAM,8BAAQ,iBAAU,iCAAW;;;AAInC,6BAAO,GAAG,CAAC,KAAK,QAAY,CAAC,KAAK;IAC9B,IAAI,QAAQ,CAAC,8BAAQ;AACzB;AAEA,6BAAO,GAAG,CAAC,aAAa,CAAC,KAAK;IAC1B,IAAI,QAAQ,CAAC,8BAAQ;AACzB;AAEA,iBAAiB;;;;AChBjB,iBAAiB,CAAC,KAAK,KAAK;IAExB,IAAI,IAAI,OAAO,CAAC,QAAQ,EACpB;SAGA,IAAI,QAAQ,CAAC;AAGrB;;;;;;;;6CCRM;;;ACDN,4BAAiB,CAAA;IAEb,MAAM,UAAE,MAAM,EAAE,GAAG;IACnB,MAAM,KAAK,IAAI,OAAO;IAEtB,GAAG,EAAE,CAAC,cAAc,CAAA;QAEhB,MAAM,SAAS,OAAO,SAAS,CAAC,OAAO,CAAC,MAAM;QAC9C,MAAM,OAAO,OAAO,KAAK,CAAC,KAAK,GAAG;QAElC,OAAO,EAAE,CAAC,WAAW,CAAA;YAEjB,GAAG,IAAI,CAAC,WAAW;sBACf;yBAAM;YACV;QAEJ;IAEJ;AAEJ;;;;;ADbA,MAAM,4BAAM;AACZ,MAAM,mCAAa,uCAAa;AAEhC,WAAW;AACX,0BAAI,GAAG,CAAC,QAA4B;AACpC,0BAAI,GAAG,CAAC,SAAS,iBAAU,iCAAW;AACtC,0BAAI,GAAG,CAAC;;AAER,SAAS;AACT,0BAAI,GAAG,CAAE;AAET,SAAS;AACT,0BAAI,GAAG,CAAE,eAAQ,MAAM,CAAE,iBAAU,iCAAW;AAE9C,sBAAsB;AACtB,iCAAW,MAAM,CAAE,0BAAI,GAAG,CAAC,SAAS;IAChC,QAAQ,GAAG,CAAC,+CAA4C,0BAAI,GAAG,CAAC;AACpE;AAEA,iCAAiC;AACjC,0BAAe","sources":["src/routes/index.js","src/middlewares/isLoggedIn.js","src/index.js","src/realtimeServer.js"],"sourcesContent":["const express = require(\"express\");\r\nconst router = express.Router();\r\nconst path = require(\"path\");\r\n\r\nconst views = path.join(__dirname, \"/../views\");\r\n\r\nconst isLoggedIn = require(\"../middlewares/isLoggedIn\");\r\n\r\nrouter.get(\"/\", isLoggedIn, (req, res) => {\r\n    res.sendFile(views + \"/index.html\");\r\n});\r\n\r\nrouter.get(\"/register\", (req, res) => {\r\n    res.sendFile(views + \"/register.html\");\r\n});\r\n\r\nmodule.exports = router;","module.exports = (req, res, next) => {\r\n\r\n    if (req.cookies.username) {\r\n        next();\r\n    }\r\n    else {\r\n        res.redirect(\"/register\");\r\n    }\r\n\r\n}","const express = require(\"express\");\r\nconst { createServer } = require(\"http\");\r\nconst realtimeServer = require(\"./realtimeServer\");\r\n\r\nconst path = require(\"path\");\r\nconst cookieParser = require(\"cookie-parser\");\r\n\r\nconst app = express();\r\nconst httpServer = createServer(app);\r\n\r\n// Settings\r\napp.set(\"port\", process.env.PORT || 3000);\r\napp.set(\"views\", path.join(__dirname, \"views\"))\r\napp.use(cookieParser());\r\n\r\n// Routes\r\napp.use( require(\"./routes\") );\r\n\r\n// Public\r\napp.use( express.static( path.join(__dirname, \"public\") ) );\r\n\r\n// Levanto el servidor\r\nhttpServer.listen( app.get(\"port\"), () => {\r\n    console.log(\"El servidor estÃ¡ corriendo en el puerto \", app.get(\"port\"));\r\n} );\r\n\r\n// Llamo al servidor de Socket.io\r\nrealtimeServer(httpServer);","module.exports = httpServer => {\r\n\r\n    const { Server } = require(\"socket.io\");\r\n    const io = new Server(httpServer);\r\n\r\n    io.on(\"connection\", socket => {\r\n\r\n        const cookie = socket.handshake.headers.cookie;\r\n        const user = cookie.split(\"=\").pop();\r\n\r\n        socket.on(\"message\", message => {\r\n\r\n            io.emit(\"message\", {\r\n                user, message\r\n            });\r\n\r\n        })\r\n\r\n    });\r\n\r\n}"],"names":[],"version":3,"file":"index.js.map"}